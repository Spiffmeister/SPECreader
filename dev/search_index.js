var documenterSearchIndex = {"docs":
[{"location":"index.html#SPECreader.jl","page":"Home","title":"SPECreader.jl","text":"","category":"section"},{"location":"index.html#Reading-in-data","page":"Home","title":"Reading in data","text":"","category":"section"},{"location":"index.html#SPECreader.SPECEquilibrium","page":"Home","title":"SPECreader.SPECEquilibrium","text":"SPECEquilibrium{TT, ATT<:Array{TT}, TSA}\n\nAll components needed to reconstruct a SPEC equilibrium.\n\neqname = \"testing/data/G3V01L0Fi.002.sp.h5\"\nspeceq = SPECEquilibrium(eqname)\n\n\n\n\n\n","category":"type"},{"location":"index.html#SPECreader.ReadBoundary-Tuple{String}","page":"Home","title":"SPECreader.ReadBoundary","text":"ReadBoundary(fname::String)\n\nOutputs the necessary data to reconstruct a SPEC boundary.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SPECreader.ReadPoincare-Tuple{String}","page":"Home","title":"SPECreader.ReadPoincare","text":"ReadPoincare(fname::String)\n\nRead the Poincaré section for a given SPEC equilibrium output.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Geometry","page":"Home","title":"Geometry","text":"","category":"section"},{"location":"index.html#SPECreader.find_sθζ","page":"Home","title":"SPECreader.find_sθζ","text":"find_sθζ(X,ζ,SpecVol::SPECEquilibrium,lvol::Integer,max_attempts=100)\n\nFind the (sthetazeta) point corresponding to a given (RZ) point for a fixed zeta. It is possible that the starting location is bad and the located point is outside of the computational domain, in which case we generate random initial conditions until it ends up inside the domain. The point is first approached using the optimize function from Optim.jl, then NonlinearSolve is used to hopefully finish pushing the point as close as possible.\n\n\n\n\n\n","category":"function"},{"location":"index.html#SPECreader.get_RZ-Union{Tuple{TT}, Tuple{TT, Any, Any, SPECEquilibrium}, Tuple{TT, Any, Any, SPECEquilibrium, Int64}} where TT","page":"Home","title":"SPECreader.get_RZ","text":"get_RZ(s::TT,θ,ζ,SpecVol::SPECEquilibrium,lvol::Integer) where TT\n\nGet the (RZ) coordinates from (sthetazetal_vol)in-11times02pi)times02pi)times1N_vol logical coordinates.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SPECreader.get_axis-Tuple{Any}","page":"Home","title":"SPECreader.get_axis","text":"get_axis(SpecVol)\n\nGet the Fourier modes of the magnetic axis of a SPEC equilibrium and output a named tuple axis.R and axis.Z.\n\n\n\n\n\n","category":"method"},{"location":"index.html#SPECreader.get_boundary","page":"Home","title":"SPECreader.get_boundary","text":"get_boundary(SpecVol::SPECEquilibrium, lvol=SpecVol.NumberofVolumes)\n\nPull the outer boundary from a spec equlibrium data structure.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Fields","page":"Home","title":"Fields","text":"","category":"section"},{"location":"index.html#SPECreader.field_line!","page":"Home","title":"SPECreader.field_line!","text":"field_line!(ẋ, t, x, SpecVol::SPECEquilibrium,lvol::Int=1)\n\nIn place field line tracing function given a lvol\n\nTODO: Implement for multi-volume spec equilibria\n\n\n\n\n\n","category":"function"},{"location":"index.html#SPECreader.get_Bfield-Union{Tuple{TSA}, Tuple{ATT}, Tuple{TT}, Tuple{TT, TT, TT, SPECEquilibrium{TT, ATT, TSA}}, Tuple{TT, TT, TT, SPECEquilibrium{TT, ATT, TSA}, Int64}} where {TT, ATT, TSA}","page":"Home","title":"SPECreader.get_Bfield","text":"get_Bfield(s::TT, θ::TT, ζ::TT, SpecVol::SPECEquilibrium{TT,ATT,TSA},lvol::Int=1) where {TT,ATT,TSA}\n\nTake a point in (sthetazeta) and return the covarient (cotangent) components of the magnetic field.\n\n\n\n\n\n","category":"method"}]
}
